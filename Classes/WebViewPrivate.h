/* Generated by RuntimeBrowser.
 Image: /Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator5.0.sdk/System/Library/PrivateFrameworks/WebKit.framework/WebKit
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
 The runtime does not encode function signature information.  We use a signature of: 
 "int (*funcName)()",  where funcName might be null. 
 */

#ifndef BZAgent_WebViewPrivate_h
#define BZAgent_WebViewPrivate_h

#include "ArchiveResource.h"
#include "WebPreferences.h"

@class NSURL, WebFixedPositionContent, WebFormDelegate, WebVideoFullscreenController, WebCaretChangeListener, WebEvent, WAKWindow, NSMutableSet, WebGeolocationProvider, WebDeviceOrientationProvider, WebNodeHighlight, WebInspector, NSString, NSTimer;

/*
struct CGSize { 
    float width; 
    float height; 
};*/

struct VectorBuffer {
    void */*struct RefPtr<WebCore::HistoryItem>*/ *_field1;
    unsigned int _field2;
};

struct Vector {
    unsigned int m_size;
    struct VectorBuffer m_buffer;
};

struct HashMap
{
    void */*struct <class>*/ **m_table;
    int m_tableSize;
    int m_tableSizeMask;
    int m_keyCount;
    int m_deletedCount;
};
struct HashSet {
    struct HashMap m_impl;
};

struct FrameTree {
    struct Frame *m_thisFrame;
    struct Frame *m_parent;
    void */*struct AtomicString*/ m_name;
    void */*struct AtomicString*/ m_uniqueName;
    void */*struct RefPtr<WebCore::Frame>*/ m_nextSibling;
    struct Frame *m_previousSibling;
    void */*struct RefPtr<WebCore::Frame>*/ m_firstChild;
    struct Frame *m_lastChild;
    unsigned int m_childCount;
};

struct ResourceRequest {
    struct KURL m_url;
    int m_cachePolicy;
    double m_timeoutInterval;
    struct KURL m_firstPartyForCookies;
    struct CString m_httpMethod;
    struct HTTPHeaderMap m_httpHeaderFields;
    struct Vector m_responseContentDispositionEncodingFallbackArray;
    void */*struct RefPtr<WebCore::FormData>*/ m_httpBody;
    _Bool m_allowCookies;
    _Bool m_resourceRequestUpdated;
    _Bool m_platformRequestUpdated;
    _Bool m_reportUploadProgress;
    _Bool m_reportLoadTiming;
    _Bool m_reportRawHeaders;
    int m_priority;
    int m_targetType;
    _Bool m_mainResourceRequest;
    void */*struct RetainPtr<const _CFURLRequest*>*/ m_cfRequest;
    void */*struct RetainPtr<NSURLRequest>*/ m_nsRequest;
};

struct NavigationAction {
    struct KURL m_URL;
    int m_type;
    void */*struct RefPtr<WebCore::Event>*/ m_event;
};


struct PolicyCallback {
    struct ResourceRequest m_request;
    void */*struct RefPtr<WebCore::FormState>*/ m_formState;
    struct CString m_frameName;
    struct NavigationAction m_navigationAction;
    void *m_navigationFunction;
    void *m_newWindowFunction;
    void *m_contentFunction;
    void *m_argument;
};

struct PolicyChecker {
    struct Frame *m_frame;
    _Bool m_delegateIsDecidingNavigationPolicy;
    _Bool m_delegateIsHandlingUnimplementablePolicy;
    int m_loadType;
    struct PolicyCallback m_callback;
};

struct HistoryController {
    struct Frame *m_frame;
    void */*struct RefPtr<WebCore::HistoryItem>*/ m_currentItem;
    void */*struct RefPtr<WebCore::HistoryItem>*/ m_previousItem;
    void */*struct RefPtr<WebCore::HistoryItem>*/ m_provisionalItem;
    _Bool m_frameLoadComplete;
    _Bool m_defersLoading;
    void */*struct RefPtr<WebCore::HistoryItem>*/ m_deferredItem;
    int m_deferredFrameLoadType;
};

struct ResourceLoadNotifier {
    struct Frame *m_frame;
};

struct Frame {
    int _field1;
    struct HashSet /*struct HashSet<WebCore::FrameDestructionObserver*, WTF::PtrHash<WebCore::FrameDestructionObserver*>, WTF::HashTrai
    ts<WebCore::FrameDestructionObserver*>>*/ _field2;
    struct Page *_field3;
    struct FrameTree _field4;
    struct FrameLoader {
        void **_vptr$FrameLoader;
        struct Frame *m_frame;
        struct FrameLoaderClient *m_client;
        struct PolicyChecker m_policyChecker;
        struct HistoryController m_history;
        struct ResourceLoadNotifier m_notifer;
        /*struct SubframeLoader m_subframeLoader;
        struct FrameLoaderStateMachine m_stateMachine;
        int m_state;
        int m_loadType;
        struct RefPtr<WebCore::DocumentLoader> m_documentLoader;
        struct RefPtr<WebCore::DocumentLoader> m_provisionalDocumentLoader;
        struct RefPtr<WebCore::DocumentLoader> m_policyDocumentLoader;
        _Bool m_delegateIsHandlingProvisionalLoadError;
        _Bool m_quickRedirectComing;
        _Bool m_sentRedirectNotification;
        _Bool m_inStopAllLoaders;
        struct String m_outgoingReferrer;
        _Bool m_isExecutingJavaScriptFormAction;
        _Bool m_didCallImplicitClose;
        _Bool m_wasUnloadEventEmitted;
        _Bool m_pageDismissalEventBeingDispatched;
        _Bool m_isComplete;
        _Bool m_isLoadingMainResource;
        struct RefPtr<WebCore::SerializedScriptValue> m_pendingStateObject;
        struct KURL m_workingURL;
        struct OwnPtr<WebCore::IconLoader> m_iconLoader;
        _Bool m_mayLoadIconLater;
        _Bool m_needsClear;
        struct KURL m_submittedFormURL;
        Timer_71fd5360 m_checkTimer;
        _Bool m_shouldCallCheckCompleted;
        _Bool m_shouldCallCheckLoadComplete;
        struct Frame *m_opener;
        struct HashSet<WebCore::Frame*, WTF::PtrHash<WebCore::Frame*>, WTF::HashTraits<WebCore::Frame*>> m_openedFrames;
        _Bool m_didPerformFirstNavigation;
        _Bool m_loadingFromCachedPage;
        _Bool m_suppressOpenerInNewFrame;
        int m_sandboxFlags;
        int m_forcedSandboxFlags;
        struct RefPtr<WebCore::FrameNetworkingContext> m_networkingContext;
        struct KURL m_previousUrl;
        _Bool m_loadsSynchronously;*/
    } _field5;/*
    struct NavigationScheduler {
        struct Frame *m_frame;
        Timer_88fb5ce9 m_timer;
        struct OwnPtr<WebCore::ScheduledNavigation> m_redirect;
    } _field6;
    struct RefPtr<WebCore::DOMWindow> _field7;
    struct HashSet<WebCore::DOMWindow*, WTF::PtrHash<WebCore::DOMWindow*>, WTF::HashTraits<WebCore::DOMWindow*>> _field8;
    struct HTMLFrameOwnerElement *_field9;
    struct RefPtr<WebCore::FrameView> _field10;
    struct RefPtr<WebCore::Document> _field11;
    struct ScriptController _field12;
    struct Editor _field13;
    struct FrameSelection {
        struct IntRect m_caretLocalRect;
        _Bool m_caretRectNeedsUpdate;
        int m_caretVisibility;
        struct Frame *m_frame;
        int m_xPosForVerticalArrowNavigation;
        struct VisibleSelection m_selection;
        int m_granularity;
        struct RefPtr<WebCore::EditingStyle> m_typingStyle;
        Timer_5399c862 m_caretBlinkTimer;
        struct IntRect m_absCaretBounds;
        struct IntRect m_absoluteCaretRepaintBounds;
        _Bool m_absCaretBoundsDirty;
        _Bool m_caretPaint;
        _Bool m_isDirectional;
        _Bool m_isCaretBlinkingSuspended;
        _Bool m_focused;
        _Bool m_updateAppearanceEnabled;
        _Bool m_caretBlinks;
        struct Color m_caretColor;
        int m_closeTypingSuppressions;
        int m_scrollingSuppressCount;
    } _field14;
    struct EventHandler {
        struct Frame *m_frame;
        _Bool m_mousePressed;
        _Bool m_capturesDragging;
        struct RefPtr<WebCore::Node> m_mousePressNode;
        _Bool m_mouseDownMayStartSelect;
        _Bool m_mouseDownWasSingleClickInSelection;
        _Bool m_beganSelectingText;
        struct IntPoint m_panScrollStartPos;
        _Bool m_panScrollInProgress;
        _Bool m_panScrollButtonPressed;
        _Bool m_springLoadedPanScrollInProgress;
        Timer_68f5250c m_hoverTimer;
        Timer_68f5250c m_autoscrollTimer;
        struct RenderObject *m_autoscrollRenderer;
        _Bool m_autoscrollInProgress;
        _Bool m_mouseDownMayStartAutoscroll;
        _Bool m_mouseDownWasInSubframe;
        Timer_68f5250c m_fakeMouseMoveEventTimer;
        _Bool m_svgPan;
        struct RefPtr<WebCore::SVGElementInstance> m_instanceUnderMouse;
        struct RefPtr<WebCore::SVGElementInstance> m_lastInstanceUnderMouse;
        struct RenderLayer *m_resizeLayer;
        struct RefPtr<WebCore::Node> m_capturingMouseEventsNode;
        _Bool m_eventHandlerWillResetCapturingMouseEventsNode;
        struct RefPtr<WebCore::Node> m_nodeUnderMouse;
        struct RefPtr<WebCore::Node> m_lastNodeUnderMouse;
        struct RefPtr<WebCore::Frame> m_lastMouseMoveEventSubframe;
        struct RefPtr<WebCore::Scrollbar> m_lastScrollbarUnderMouse;
        int m_clickCount;
        struct RefPtr<WebCore::Node> m_clickNode;
        float m_gestureInitialDiameter;
        float m_gestureLastDiameter;
        float m_gestureInitialRotation;
        float m_gestureLastRotation;
        unsigned int m_firstTouchID;
        struct Vector<WTF::RefPtr<WebCore::Touch>, 0ul> m_touches;
        struct HashSet<WTF::RefPtr<WebCore::EventTarget>, WTF::PtrHash<WTF::RefPtr<WebCore::EventTarget>>, WTF::HashTraits<WTF::RefPtr<WebCore::EventTarget>>> m_gestureTargets;
        struct RefPtr<WebCore::Frame> m_touchEventTargetSubframe;
        struct RefPtr<WebCore::HTMLFrameSetElement> m_frameSetBeingResized;
        struct IntSize m_offsetFromResizeCorner;
        struct IntPoint m_currentMousePosition;
        struct IntPoint m_mouseDownPos;
        double m_mouseDownTimestamp;
        struct PlatformMouseEvent m_mouseDown;
        _Bool m_useLatchedWheelEventNode;
        struct RefPtr<WebCore::Node> m_latchedWheelEventNode;
        _Bool m_widgetIsLatched;
        struct RefPtr<WebCore::Node> m_previousWheelScrolledNode;
        WAKView *m_mouseDownView;
        _Bool m_sendingEventToSubview;
    } _field15;
    struct AnimationController _field16;
    Timer_d271acc1 _field17;
    float _field18;
    struct IntPoint _field19;
    struct ViewportArguments _field20;
    _Bool _field21;
    struct VisibleSelection _field22;
    struct VisibleSelection _field23;
    struct FloatSize _field24;
    unsigned int _field25;
    unsigned int _field26;
    unsigned int _field27;
    double _field28;
    double _field29;
    Timer_d271acc1 _field30;
    float _field31;
    float _field32;
    float _field33;
    int _field34;
    _Bool _field35;
    _Bool _field36;
    _Bool _field37;
    _Bool _field38;
    int _field39;*/
};
struct RefPtr_Frame
{
    //int refCntAndFlags;
    struct Frame frame;
};


struct Page {
    void * /*struct OwnPtr<WTF::HashSet<WTF::RefPtr<WebCore::SchedulePair>, WebCore::SchedulePairHash, WTF::HashTraits<WTF::Ref
    Ptr<WebCore::SchedulePair>>>>*/ _field1;
    void * /*struct OwnPtr<WebCore::Chrome>*/ _field2;
    void * /*struct OwnPtr<WebCore::DragCaretController>*/ _field3;
    void * /*struct OwnPtr<WebCore::FocusController>*/ _field4;
    void * /*struct OwnPtr<WebCore::InspectorController>*/ _field5;
    void * /*struct OwnPtr<WebCore::Settings>*/ _field6;
    void * /*struct OwnPtr<WebCore::ProgressTracker>*/ _field7;
    void * /*struct OwnPtr<WebCore::BackForwardController>*/ _field8;
    RefPtr_Frame * /*struct RefPtr<WebCore::Frame>*/ _field9;
    void * /*struct RefPtr<WebCore::PluginData>*/ _field10;
    void * /*struct RefPtr<WebCore::RenderTheme>*/ _field11;
    struct EditorClient {} *_field12;
    int _field13;
    struct String {} _field14;
    _Bool _field15;
    _Bool _field16;
    _Bool _field17;
    _Bool _field18;
    _Bool _field19;
    _Bool _field20;
    float _field21;
    _Bool _field22;
    struct String _field23;
    struct String _field24;
    _Bool _field25;
    int _field26;
    void */*struct OwnPtr<WebCore::PageGroup>*/ _field27;
    struct PageGroup *_field28;
    struct Debugger *_field29;
    double _field30;
    int _field31;
    _Bool _field32;
    void */*struct OwnPtr<WebCore::PluginHalter>*/ _field33;
    void */*struct RefPtr<WebCore::StorageNamespace>*/ _field34;
    int _field35;
    struct ViewportArguments {} _field36;
    double _field37;
    void */*truct OwnPtr<WTF::HashSet<WebCore::ScrollableArea*, WTF::PtrHash<WebCore::ScrollableArea*>, WTF::HashTraits<WebCore::ScrollableArea*>>>*/ _field38;
    _Bool _field39;
};

struct WebResourceDelegateImplementationCache { 
    int (*didCancelAuthenticationChallengeFunc)(); 
    int (*didReceiveAuthenticationChallengeFunc)(); 
    int (*canAuthenticateAgainstProtectionSpaceFunc)(); 
    int (*connectionPropertiesFunc)(); 
    int (*webThreadDidFinishLoadingFromDataSourceFunc)(); 
    int (*webThreadDidFailLoadingWithErrorFromDataSourceFunc)(); 
    int (*webThreadIdentifierForRequestFunc)(); 
    int (*webThreadDidLoadResourceFromMemoryCacheFunc)(); 
    int (*webThreadWillSendRequestFunc)(); 
    int (*webThreadDidReceiveResponseFunc)(); 
    int (*webThreadDidReceiveContentLengthFunc)(); 
    int (*webThreadWillCacheResponseFunc)(); 
    int (*identifierForRequestFunc)(); 
    int (*willSendRequestFunc)(); 
    int (*didReceiveResponseFunc)(); 
    int (*didReceiveContentLengthFunc)(); 
    int (*didFinishLoadingFromDataSourceFunc)(); 
    int (*didFailLoadingWithErrorFromDataSourceFunc)(); 
    int (*didLoadResourceFromMemoryCacheFunc)(); 
    int (*willCacheResponseFunc)(); 
    int (*plugInFailedWithErrorFunc)(); 
    int (*shouldUseCredentialStorageFunc)(); 
    int (*shouldPaintBrokenImageForURLFunc)(); 
};

@interface WebViewPrivate : NSObject  {
@public
    struct Page *page;
    id UIDelegate;
    id UIDelegateForwarder;
    id resourceProgressDelegate;
    id downloadDelegate;
    id policyDelegate;
    id policyDelegateForwarder;
    id frameLoadDelegate;
    id frameLoadDelegateForwarder;
    WebFormDelegate *formDelegate;
    id editingDelegate;
    id editingDelegateForwarder;
    id scriptDebugDelegate;
    id historyDelegate;
    id resourceProgressDelegateForwarder;
    id formDelegateForwarder;
    WebInspector *inspector;
    WebNodeHighlight *currentNodeHighlight;
    BOOL allowsRemoteInspection;
    BOOL allowsUndo;
    float zoomMultiplier;
    BOOL zoomsTextOnly;
    NSString *applicationNameForUserAgent;
    CString userAgent;
    BOOL userAgentOverridden;
    WebPreferences *preferences;
    BOOL useSiteSpecificSpoofing;
    NSURL *userStyleSheetLocation;
    WAKWindow *hostWindow;
    int programmaticFocusCount;
    struct WebResourceDelegateImplementationCache resourceLoadDelegateImplementations;
    struct WebFrameLoadDelegateImplementationCache { 
        int (*didClearWindowObjectForFrameFunc)(); 
        int (*didClearWindowObjectForFrameInScriptWorldFunc)(); 
        int (*didClearInspectorWindowObjectForFrameFunc)(); 
        int (*windowScriptObjectAvailableFunc)(); 
        int (*didHandleOnloadEventsForFrameFunc)(); 
        int (*didReceiveServerRedirectForProvisionalLoadForFrameFunc)(); 
        int (*didCancelClientRedirectForFrameFunc)(); 
        int (*willPerformClientRedirectToURLDelayFireDateForFrameFunc)(); 
        int (*didChangeLocationWithinPageForFrameFunc)(); 
        int (*didPushStateWithinPageForFrameFunc)(); 
        int (*didReplaceStateWithinPageForFrameFunc)(); 
        int (*didPopStateWithinPageForFrameFunc)(); 
        int (*willCloseFrameFunc)(); 
        int (*didStartProvisionalLoadForFrameFunc)(); 
        int (*didReceiveTitleForFrameFunc)(); 
        int (*didCommitLoadForFrameFunc)(); 
        int (*didFailProvisionalLoadWithErrorForFrameFunc)(); 
        int (*didFailLoadWithErrorForFrameFunc)(); 
        int (*didFinishLoadForFrameFunc)(); 
        int (*didFirstLayoutInFrameFunc)(); 
        int (*didFirstVisuallyNonEmptyLayoutInFrameFunc)(); 
        int (*didFinishDocumentLoadForFrameFunc)(); 
        int (*didDisplayInsecureContentFunc)(); 
        int (*didRunInsecureContentFunc)(); 
    } frameLoadDelegateImplementations;
    struct WebScriptDebugDelegateImplementationCache { 
        BOOL didParseSourceExpectsBaseLineNumber; 
        BOOL exceptionWasRaisedExpectsHasHandlerFlag; 
        int (*didParseSourceFunc)(); 
        int (*failedToParseSourceFunc)(); 
        int (*didEnterCallFrameFunc)(); 
        int (*willExecuteStatementFunc)(); 
        int (*willLeaveCallFrameFunc)(); 
        int (*exceptionWasRaisedFunc)(); 
    } scriptDebugDelegateImplementations;
    struct WebHistoryDelegateImplementationCache { 
        int (*navigatedFunc)(); 
        int (*clientRedirectFunc)(); 
        int (*serverRedirectFunc)(); 
        int (*setTitleFunc)(); 
        int (*populateVisitedLinksFunc)(); 
    } historyDelegateImplementations;
    void *observationInfo;
    BOOL closed;
    BOOL closing;
    BOOL shouldCloseWithWindow;
    BOOL mainFrameDocumentReady;
    BOOL drawsBackground;
    BOOL tabKeyCyclesThroughElementsChanged;
    BOOL becomingFirstResponder;
    BOOL becomingFirstResponderFromOutside;
    BOOL hoverFeedbackSuspended;
    BOOL usesPageCache;
    BOOL catchesDelegateExceptions;
    BOOL cssAnimationsSuspended;
    struct CGColor { } *backgroundColor;
    NSString *mediaStyle;
    BOOL hasSpellCheckerDocumentTag;
    int spellCheckerDocumentTag;
    BOOL smartInsertDeleteEnabled;
    BOOL selectTrailingWhitespaceEnabled;
    BOOL isStopping;
    id UIKitDelegate;
    id UIKitDelegateForwarder;
    id WebMailDelegate;
    BOOL allowsMessaging;
    NSMutableSet *_caretChangeListeners;
    WebCaretChangeListener *_caretChangeListener;
    struct CGSize fixedLayoutSize;
    BOOL mainViewIsScrollingOrZooming;
    int didDrawTiles;
    struct HashMap_stuff {
        struct HashTable_stuff {
            struct pair_int_object {} *m_table; 
            int m_tableSize; 
            int m_tableSizeMask; 
            int m_keyCount; 
            int m_deletedCount; 
        } m_impl; 
    } identifierMap;
    BOOL _keyboardUIModeAccessed;
    int _keyboardUIMode;
    BOOL shouldUpdateWhileOffscreen;
    BOOL usesDocumentViews;
    BOOL includesFlattenedCompositingLayersWhenDrawingToBitmap;
    BOOL needsOneShotDrawingSynchronization;
    BOOL postsAcceleratedCompositingNotifications;
    struct __CFRunLoopObserver { } *layerSyncRunLoopObserver;
    struct CGSize lastLayoutSize;
    BOOL ignoringMouseDraggedEvents;
    WebEvent *mouseDownEvent;
    BOOL handlingMouseDownEvent;
    WebEvent *keyDownEvent;
    NSTimer *autoscrollTimer;
    WebEvent *autoscrollTriggerEvent;
    WebVideoFullscreenController *fullscreenController;
    WebGeolocationProvider *_geolocationProvider;
    WebDeviceOrientationProvider *m_deviceOrientationProvider;
    struct RefPtr_WebCore_HistoryItem { 
        struct HistoryItem {} *m_ptr; 
    } _globalHistoryItem;
    BOOL interactiveFormValidationEnabled;
    int validationMessageTimerMagnification;
    WebFixedPositionContent *_fixedPositionContent;
};


@end

#endif
